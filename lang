#!/bin/sh
echo

assemblers="clang as yasm" # gcc nasm
languages="erl fscript gfortran 8g 6g ghc cabal java julia kotlinc lua ocaml perl php swipl python python3 ruby macruby gem rustc scala chez sagittarius xcrun" #java
websystems="apachectl ant"
databases="mysql psql sqlite3"
packagemanagers="brew"
versionsystems="cvs git hg svn"
buildsystems="make xcodebuild"
shells="bash csh fish ksh tcsh zsh"

for language in $assemblers echo $languages echo $buildsystems echo $packagemanagers echo $websystems echo $databases echo $versionsystems echo $shells
do
	if [ `which $language` ]
	then
		case $language in
			# assemblers______________________________________________________________________
			as         ) as -v < /dev/null 2>&1 | awk '{print $2,$4}' | grep LLVM;;
			clang      ) clang --version 2>&1 | head -n 1 | awk '{ print "Clang",$4 }';;
			gcc        ) gcc --version | grep gcc | awk '{ print "GCC",$3 }';;
			nasm       ) nasm -v | awk '{ print $1,$2,$3 }';;
			yasm       ) yasm --version | grep yasm | grep -v Run | awk '{ print $1, $2 }';;
			
			# languages_______________________________________________________________________
			erl        ) erl +V 2>&1 | awk '{ print $1, $6 }';;
			fscript    ) echo; echo "F-Script:"; fscript -v;;
			gfortran   ) gfortran --version 2>&1 | grep "GCC" | awk '{print $1,$2,$4}';;
			8g         ) 8g -V | awk '{ print "Go",$3,"(32-bit)" }';;
			6g         ) 6g -V | awk '{ print "Go",$3,"(64-bit)" }';;
			ghc        ) ghc --numeric-version | awk '{print "Haskell (GHC)",$0}';;
			cabal      ) cabal --numeric-version | awk '{print "Haskell Cabal",$0}';;
			java       ) javac -version 2>&1 | awk '{split($2,a," "); print "Java",a[1]}';;
			julia      ) julia -v | awk '{print "Julia", $3}';;
			kotlinc    ) kotlinc -version 2>&1 | awk '{print "Kotlin",$3}';;
			lua        ) lua -e 'print( _VERSION )';;
			ocaml      ) ocaml -version | awk '{print $2,$5}';;
			perl       ) perl -v | grep 'is perl' | awk '{print "Perl",$9}' | sed 's/[\(\)v]//g';;
			php        ) php -v | grep PHP | grep built | awk '{print $1,$2}';;
			swipl      ) swipl --version | awk '{print $1,$3}';;
			python     ) python -V;;
			python3    ) python3 -V;;
			ruby       ) ruby -v | awk '{ print "Ruby",$2 }';;
			macruby    ) macruby -v | awk '{ print $1,$3,$4; }';;
			gem        ) gem -v | awk '{ print "Ruby Gem",$1 }';;
			scala      ) scalac -version | awk '{print $1,$4}';;
			chez       ) chez --version 2>&1 | awk '{ print "Chez Scheme",$1 }';;
			sagittarius) sagittarius -v | awk '{ print $1,$2,$5 }';;
			xcrun      ) xcrun swift -version 2>&1 | grep Swift | awk '{ print $2, $4 }';;
			rustc      ) rustc -V | awk '{print "Rust",$2}';;
			
			# package managers________________________________________________________________
			brew       ) brew -v | grep -v - | awk '{print $1,$2}';;
			
			# web systems_____________________________________________________________________
			apachectl  ) apachectl -v | grep Apache | awk '{ print $3}' | sed 's/\// /';;
			ant        ) ant -version | awk '{ print $1,$2,$4 }';;
			rails      ) rails -v;;
			
			# databases_______________________________________________________________________
			mysql      ) mysql --version | awk '{ print $1, $3 }';;
			psql       ) psql --version | grep -v contains | awk '{ print "PostgreSQL",$3 }';;
			sqlite3    ) sqlite3 --version | awk '{ print "SQLite",$1 }';;
			
			# versioning______________________________________________________________________
			cvs        ) cvs --version | grep client | sed 's/ (client\/server)//' | sed 's/ (CVS)//';;
			git        ) git --version | awk '{print $1,$3}';;
			hg         ) hg --version | head -n 1 | awk '{ split( $0,a," " ); print a[1],a[5] }' | sed 's/)//';;
			svn        ) svn --version | grep 'svn, version' | sed 's/, version//' | sed 's/svn/Subversion/';;
			
			# build systems___________________________________________________________________
			make       ) make -v | grep Make;;
			xcodebuild ) xcodebuild -version | grep Xcode;;
			
			# shell environments______________________________________________________________
			bash       ) bash --version | head -n 1 | awk '{ print "bash: ",$4 }';;
			csh        ) csh --version | awk '{ print " csh: ",$2 }';;
			fish       ) fish -v 2>&1 | awk '{ print "fish: ",$3 }';;
			ksh        ) ksh 'echo ${.sh.version}' | awk '{ print " ksh: ", $2, $3 }';;
			sh         ) sh --version | head -n 1 | awk '{ print "  sh: ", $2, $4 }';;
			tcsh       ) tcsh --version | awk '{ print "tcsh: ",$2 }';;
			zsh        ) zsh --version | awk '{ print " zsh: ",$2 }';;
			echo       ) echo;;
		esac
	fi
done
echo
