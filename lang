#!/bin/sh
echo

assemblers="clang as nasm yasm" # gcc
languages="apl erl fscript gfortran go 8g 6g ghc java julia kotlinc lua ocaml perl php gprolog swipl python python3 ruby macruby rustc scala sml chez sagittarius swift wolframscript"
languagePackageManagers="cabal gem"
websystems="apachectl ant"
databases="mysql psql sqlite3"
packagemanagers="brew"
versionsystems="cvs git hg svn"
buildsystems="make xcodebuild"
shells="bash csh fish ksh tcsh zsh"

version () {
	case $1 in
		# assemblers______________________________________________________________________
		as            ) as -v < /dev/null 2>&1 | awk '{print $2,$4}' | grep LLVM;;
		clang         ) clang --version 2>&1 | head -n 1 | awk '{ print "Clang",$4 }';;
		gcc           ) gcc --version | grep gcc | awk '{ print "GCC",$3 }';;
		nasm          ) nasm --version | awk '{print $1,$3}';;
		yasm          ) yasm --version | grep yasm | grep -v Run | awk '{ print $1, $2 }';;
		
		# languages_______________________________________________________________________
		apl           ) apl -v | grep Version | awk '{ print "GNU APL", $4 }';;
		erl           ) erl +V 2>&1 | awk '{ print $1, $6 }';;
		fscript       ) echo; echo "F-Script:"; fscript -v;;
		gfortran      ) gfortran --version 2>&1 | grep "Fortran" | awk '{ print $1,$2,$6 }';;
		go            ) go version | awk '{print $3}' | sed 's/go/Go /';;
		8g            ) 8g -V | awk '{ print "Go",$3,"(32-bit)" }';;
		6g            ) 6g -V | awk '{ print "Go",$3,"(64-bit)" }';;
		ghc           ) ghc --numeric-version | awk '{ print "Haskell (GHC)",$0 }';;
		# java          ) javac -version 2>&1 | awk '{ split($2,a," "); print "Java",a[1] }';;
		julia         ) julia -v | awk '{ print "Julia", $3 }';;
		kotlinc       ) kotlinc -version 2>&1 | awk '{ print "Kotlin",$3 }';;
		lua           ) lua -e 'print( _VERSION )';;
		ocaml         ) ocaml -version | awk '{ print $2,$5 }';;
		perl          ) perl -v | grep 'is perl' | awk '{ print "Perl",$9 }' | sed 's/[\(\)v]//g';;
		php           ) php -v | grep PHP | grep built | awk '{ print $1,$2 }';;
		swipl         ) swipl --version | awk '{ print $1,$3}';;
		gprolog       ) gprolog --version 2>&1 | grep top-Level | awk '{ print $3,$4,$5 }' | sed 's/[\(\)]//g';;
		python        ) python -V;;
		python3       ) python3 -V;;
		ruby          ) ruby -v | awk '{ print "Ruby",$2 }';;
		macruby       ) macruby -v | awk '{ print $1,$3,$4; }';;
		scala         ) scalac -version | awk '{ print $1,$4}';;
		sml           ) sml @SMLversion | awk '{ print "Standard ML",$2 }';;
		chez          ) chez --version 2>&1 | awk '{ print "Chez Scheme",$1 }';;
		sagittarius   ) sagittarius -v | awk '{ print $1,$2,$5 }';;
		swift         ) swift --version 2>&1 | grep Swift | awk '{ print $5, $7 }';;
		rustc         ) rustc -V | awk '{ print "Rust",$2}';;
		wolframscript ) wolframscript --version | awk '{ print $1, $2 }';;
		
		# language package managers_______________________________________________________
		cabal         ) cabal --numeric-version | awk '{print "Haskell Cabal",$0}';;
		gem           ) gem -v | awk '{ print "Ruby Gem",$1 }';;
		
		# package managers________________________________________________________________
		brew          ) brew -v | grep -v - | awk '{print $1,$2}';;
		
		# web systems_____________________________________________________________________
		apachectl     ) apachectl -v | grep Apache | awk '{ print $3}' | sed 's/\// /';;
		ant           ) ant -version | awk '{ print $1,$2,$4 }';;
		rails         ) rails -v;;
		
		# databases_______________________________________________________________________
		mysql         ) mysql --version | awk '{ print $1, $3 }';;
		psql          ) psql --version | grep -v contains | awk '{ print "PostgreSQL",$3 }';;
		sqlite3       ) sqlite3 --version | awk '{ print "SQLite",$1 }';;
		
		# versioning______________________________________________________________________
		cvs           ) cvs --version | grep client | sed 's/ (client\/server)//' | sed 's/ (CVS)//';;
		git           ) git --version | awk '{print $1,$3}';;
		hg            ) hg --version | head -n 1 | awk '{ split( $0,a," " ); print a[1],a[5] }' | sed 's/)//';;
		svn           ) svn --version | grep 'svn, version' | sed 's/, version//' | sed 's/svn/Subversion/';;
		
		# build systems___________________________________________________________________
		make          ) make -v | grep Make;;
		xcodebuild    ) xcodebuild -version | grep Xcode;;
		
		# shell environments______________________________________________________________
		bash          ) bash --version | head -n 1 | awk '{ print "bash: ",$4 }';;
		csh           ) csh --version | awk '{ print " csh: ",$2 }';;
		fish          ) fish -v 2>&1 | awk '{ print "fish: ",$3 }';;
		ksh           ) ksh 'echo ${.sh.version}' | awk '{ print " ksh: ", $2, $3 }';;
		sh            ) sh --version | head -n 1 | awk '{ print "  sh: ", $2, $4 }';;
		tcsh          ) tcsh --version | awk '{ print "tcsh: ",$2 }';;
		zsh           ) zsh --version | awk '{ print " zsh: ",$2 }';;
		echo          ) echo;;
	esac
}

if [ "$#" -eq 0 ]
then
	for language in $assemblers echo $languages echo $languagePackageManagers echo $buildsystems echo $packagemanagers echo $websystems echo $databases echo $versionsystems echo $shells
	do
		if [ `which $language` ]
		then
			version $language
		fi
	done
else
	for language in $*
	do
		if [ `which $language` ]
		then
			version $language
		fi
	done
fi
echo
